.. rst-class:: page-break

   .. only:: rinoh

      |nbsp|
.. QUIRKS: Only with this dummy paragraph, the special rinohtype class
   'page-break-paragraph' react as expected. But the '.. rubric::' directive
   should also be handled as a 'ParagraphStyle' and trigger that class, But
   it doesn't work as expected. Fix this later!

.. rubric:: Durchführung

Du beginnst mit dem speziellen Devicetree Overlay. Du hast das Prinzip ja schon
in der :ref:`zurückliegenden Übung <hs-cli-sensor-bmp280>` durchlaufen. Wir
nutzen hier den Dateinamen :file:`rp2040-adc23.overlay`. Diese Datei entsteht
wieder in deinem West Workspace und enthält folgendes:

.. literalinclude:: /_assets/rp2040-adc23.overlay
   :language: DTS
   :lines: 6-

**Eine kurze Erläuterung dazu:** Die beiden ADC Kanäle 2 (Potentiometer am
Steckverbinder **GROVE 7**) und 3 (halbe Motorspannung) werden dem **höchst
Zephyr spezifischen Knoten** :ref:`zephyr,user <zephyr:dt-zephyr-user>` als
Eigenschaft ``io-channels`` zugänglich gemacht. Die C-Quellen des Zephyr Treiber
Beispiels :doc:`zephyr:samples/drivers/adc/adc_dt/README` erwarten genau diese
Eigenschaft um die generischen Funktionen mit den richtigen Werten zu
parametrisieren. Der Rest sind notwendige Konfigurationen für die zu benutzenden
ADC Kanäle, die man ebenso deklarativ aufschreibt.

.. admonition:: Gut zu wissen
   :class: info

   *Damit ist der funktionale Code auf seiner Werkzeugebene, der Compiler,
   komplett von der Hardware entkoppelt und die Hardware für sich, in ihrer
   Ebene, zu anderen und eigenständigen Werkzeugen überführt, oder besser
   gesagt weg abstrahiert!*

   **– Stimmt der Devicetree, dann funktioniert die Software! –**

.. rst-class:: page-break

-----------------------------------------------------------------------------

.. ..... BUILD ..............................................................

.. image:: /_images/symbol-coder-server-bl.*
   :class: sidecar

Hole deine **Online-Sitzung von VS Code** wieder in den Vordergrund und **baue
die Zephyr UF2 Firmware** ``zephyr/samples/drivers/adc/adc_dt`` zusammen mit
dem Devicetree Overlay :file:`rp2040-adc23.overlay`, gib ein::

   west build -p -b cytron_maker_pi_rp2040        -S usb-console \
              zephyr/samples/drivers/adc/adc_dt                  \
           -- -DEXTRA_DTC_OVERLAY_FILE=$(pwd)/rp2040-adc23.overlay

-----------------------------------------------------------------------------

.. ..... FLASH ..............................................................

.. image:: /_images/symbol-rp2040-uf2-rd.*
   :class: sidecar

**Lade** dir die **Zephyr UF2 Firmware** herunter und lade diese anschließend
**auf dein MCU-Board**.

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. rubric:: Neue Zephyr UF2 Firmware mit extra Devicetree Overlay benutzen

Hole deinen **Terminalemulator** in den Vordergrund und **beobachte die
Ausgaben**, folgendes muss zu sehen sein:

.. parsed-literal::
   :class: code

   \*\*\*\*\* delaying boot 4000ms (per build configuration) \*\*\*\*\*
   \*\*\* Booting Zephyr OS build zephyr-v3.6… (delayed boot 4000ms) \*\*\*
   ADC reading[0]:
   - adc@4004c000, channel 2: 1192 = 960 mV
   - adc@4004c000, channel 3: 2947 = 2374 mV
   ADC reading[1]:
   - adc@4004c000, channel 2: 1171 = 943 mV
   - adc@4004c000, channel 3: 2954 = 2379 mV

Drehe nun wieder an dem Potentiometer und beobachte:

.. parsed-literal::
   :class: code

   ADC reading[2]:
   - adc@4004c000, channel 2: 1185 = 954 mV
   - adc@4004c000, channel 3: 2954 = 2379 mV
   ADC reading[3]:
   - adc@4004c000, channel 2: 1535 = 1236 mV
   - adc@4004c000, channel 3: 2955 = 2380 mV
   ADC reading[4]:
   - adc@4004c000, channel 2: 2018 = 1625 mV
   - adc@4004c000, channel 3: 2953 = 2379 mV
   ADC reading[5]:
   - adc@4004c000, channel 2: 2456 = 1978 mV
   - adc@4004c000, channel 3: 2957 = 2382 mV
   ADC reading[6]:
   - adc@4004c000, channel 2: 3334 = 2686 mV
   - adc@4004c000, channel 3: 2952 = 2378 mV
   ADC reading[7]:
   - adc@4004c000, channel 2: 4095 = 3299 mV
   - adc@4004c000, channel 3: 2953 = 2379 mV
   ADC reading[8]:
   - adc@4004c000, channel 2: 5 = 4 mV
   - adc@4004c000, channel 3: 2954 = 2379 mV
   ADC reading[9]:
   - adc@4004c000, channel 2: 3 = 2 mV
   - adc@4004c000, channel 3: 2956 = 2381 mV

.. rst-class:: page-break

-----------------------------------------------------------------------------

.. ..... INFO ...............................................................

.. rubric:: Experimente mit einem NTC Widerstand

In deiner Box befindet sich noch das Modul **Seeed Studio – Grove - Temperature
Sensor V1.2**. Dieses besitzt einen Temperatur veränderlichen Widerstand (NTC)
und liefert die resultierende Spannung über einen kleinen Verstärker aus. Wenn
du dieses Modul nun einfach anstatt des **Seeed Studio – Grove - Potentiometer**
am Steckverbinder **GROVE 7** anschließt, erhältst du an deiner Console eine zur
Raumtemperatur äquivalente Spannung für den ADC Kanal 2.

Mit deinem Finger oder Daumen kannst du den NTC auf Körpertemperatur bringen.
Siehst du die Veränderungen? Wir haben Werte von **1680 mV** (Raumtemperatur)
bis **1920 mV** (Körpertemperatur) registriert.

.. admonition:: Hinweis
   :class: info

   .. image:: /_images/assemblies/zd-hw-setup-adc-ntc.*
      :align: center

   Probiere es aus – **vergiss aber bitte nicht, danach wieder das Modul mit
   dem Potentiometer an dein MCU-Board anzuschließen!**

.. include:: yourspace.rsti

.. admonition:: Nur für Mentoren
   :class: red-border bug
   :collapsible:

   :download:`ZD-cytron_maker_pi_rp2040-usbcons-drivers-adc.uf2
   </_assets/ZD-cytron_maker_pi_rp2040-usbcons-drivers-adc.uf2>`,
   :download:`rp2040-adc23.overlay </_assets/rp2040-adc23.overlay>`
   – als Not-Backup gedacht!
