Durchführung
************

Extra Devicetree Overlay für die ADC Kanäle 2 und 3
===================================================

Du beginnst mit dem speziellen Devicetree Overlay. Du hast das Prinzip ja schon
in :ref:`der zurückliegenden Übung <hs-cli-sensor-bmp280>` durchlaufen. Wir
nutzen hier den Dateinamen :file:`rp2040-adc23.overlay`.

.. compound::

   Diese Datei entsteht wieder in deinem West Workspace und enthält folgendes:

   .. literalinclude:: /_assets/rp2040-adc23.overlay
      :language: DTS
      :lines: 6-

**Eine kurze Erläuterung dazu:** Die beiden ADC Kanäle 2 (Potentiometer am
Steckverbinder **GROVE 7**) und 3 (halbe Motorspannung) werden dem **höchst
Zephyr spezifischen Knoten** :ref:`zephyr,user <zephyr:dt-zephyr-user>` als
Eigenschaft ``io-channels`` zugänglich gemacht. Die C-Quellen des Zephyr Treiber
Beispiels :doc:`zephyr:samples/drivers/adc/adc_dt/README` erwarten genau diese
Eigenschaft um die generischen Funktionen mit den richtigen Werten zu
parametrisieren. Der Rest sind notwendige Konfigurationen für die zu benutzenden
ADC Kanäle, die man ebenso deklarativ aufschreibt.

.. admonition:: Gut zu wissen
   :class: good-to-know info

   *Damit ist der funktionale Code auf seiner Werkzeugebene, der Compiler,
   komplett von der Hardware entkoppelt. Hardware wird nicht mehr als C-Code
   definiert!*

   **– Wenn der Devicetree stimmt, dann funktioniert die Software! –**

Zephyr UF2 Firmware mit extra Devicetree Overlay bauen und laden
================================================================

Hole deine **Online-Sitzung von VS Code** wieder in den Vordergrund.

-----------------------------------------------------------------------------

.. ..... BUILD ..............................................................

.. image:: /_images/symbol-coder-server-bl.*
   :class: sidecar

.. compound::

   **Baue die Zephyr UF2 Firmware** ``zephyr/samples/drivers/adc/adc_dt``
   zusammen mit dem Devicetree Overlay :file:`rp2040-adc23.overlay`, gib ein:

   .. parsed-literal::
      :class: code

      west build -p -b |BOARD|        |USB_CONSOLE| \\
                 |ADC_DT_st|                  \\
              **-- -DEXTRA_DTC_OVERLAY_FILE=$(pwd)/rp2040-adc23.overlay**

-----------------------------------------------------------------------------

.. ..... FLASH ..............................................................

.. image:: /_images/symbol-rp2040-uf2-rd.*
   :class: sidecar

**Lade** dir die **Zephyr UF2 Firmware** herunter und lade diese anschließend
**auf dein MCU-Board**.

Neue Zephyr UF2 Firmware mit extra Devicetree Overlay benutzen
==============================================================

Hole deinen **Terminalemulator** in den Vordergrund.

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   **Beobachte die Ausgaben**, folgendes muss zu sehen sein:

   .. parsed-literal::
      :class: code

      |BOOTMSG_USB_ZS_ADC_DT|

.. compound::

   Drehe nun wieder an dem Potentiometer und beobachte:

   .. parsed-literal::
      :class: code

      |BOOTMSG_USB_ZS_ADC_DT_CH2_UPDOWN|

Experimente mit einem NTC Widerstand
====================================

In deiner Box befindet sich noch das Modul **Seeed Studio – Grove - Temperature
Sensor V1.2**. Dieses besitzt einen Temperatur veränderlichen Widerstand (NTC)
und liefert die resultierende Spannung über einen kleinen Verstärker aus. Wenn
du dieses Modul nun einfach anstatt des **Seeed Studio – Grove - Potentiometer**
am Steckverbinder **GROVE 7** anschließt, erhältst du an deiner Console eine zur
Raumtemperatur äquivalente Spannung für den ADC Kanal 2.

Mit deinem Finger oder Daumen kannst du den NTC auf Körpertemperatur bringen.
Siehst du die Veränderungen? Wir haben Werte von **1680 mV** (Raumtemperatur)
bis **1920 mV** (Körpertemperatur) registriert.

.. admonition:: Hinweis
   :class: good-to-know info

   .. image:: /_images/assemblies/zd-hw-setup-adc-ntc.*
      :align: center

   Probiere es aus – **vergiss aber bitte nicht, danach wieder das Modul mit
   dem Potentiometer an dein MCU-Board anzuschließen!**

.. include:: yourspace.rsti

.. admonition:: Nur für Mentoren
   :class: red-border bug
   :collapsible:

   :download:`ZD-cytron_maker_pi_rp2040-usbcons-drivers-adc.uf2
   </_assets/ZD-cytron_maker_pi_rp2040-usbcons-drivers-adc.uf2>`,
   :download:`rp2040-adc23.overlay </_assets/rp2040-adc23.overlay>`
   – als Not-Backup gedacht!

.. vi: ft=rst ai ts=3 et sw=3 sta
