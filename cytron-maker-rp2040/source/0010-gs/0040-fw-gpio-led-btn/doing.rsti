.. rst-class:: page-break

   .. only:: rinoh

      |nbsp|
.. QUIRKS: Only with this dummy paragraph, the special rinohtype class
   'page-break-paragraph' react as expected. But the '.. rubric::' directive
   should also be handled as a 'ParagraphStyle' and trigger that class, But
   it doesn't work as expected. Fix this later!

.. rubric:: Visual Studio Code (online)

Wenn immer in dieser Anleitung der Text mit dem **Coder Symbol** gekennzeichnet
ist, musst du zu deiner **Online-Sitzung von VS Code in deinem WEB-Browser**
wechseln.

.. image:: /_images/symbol-coder-server-bl.*
   :class: sidecar

Du erreichst **unsere Cloud Infrastruktur** über das Dashboard auf:

    |online_ide_entry|

Dort meldest du dich mit deinen persönlichen Zugangsdaten an und findest dann
über **Workspaces** in einer Liste einen Eintrag für dich. Wähle diesen aus
und du gelangst auf eine Übersicht mit einer Taste mit der Aufschrift
**code-server** (*nicht "VS Code Desktop" !!!*). Drücke diese.

.. only:: html

   .. list-table::
      :align: center
      :width: 80%
      :widths: 20, 80

      * - .. image:: /_images/coder/coder-dashboard-login.*
             :align: center
             :scale: 100%
        - .. image:: /_images/coder/coder-dashboard-workspace.*
             :align: center
             :scale: 100%

.. only:: rinoh

   .. list-table::
      :align: center
      :width: 80%

      * - .. image:: /_images/coder/coder-dashboard-login.*
             :align: center
             :scale: 33%
      * - .. image:: /_images/coder/coder-dashboard-workspace.*
             :align: center
             :scale: 100%

Daraufhin öffnet sich ein **neues WEB-Browser Fenster mit VS Code**. Bestätige
die **Vertrauenswürdigkeit** und schalte dir das **Terminal** im unteren Panel
ein. Wir empfehlen dir dringend, darin sofort in eine **Bash** zu wechseln.

.. only:: html

   .. list-table::
      :align: center
      :width: 80%
      :widths: 50, 50

      * - .. image:: /_images/coder/code-server-virgin.*
             :align: center
             :scale: 100%
        - .. image:: /_images/coder/code-server-bash.*
             :align: center
             :scale: 100%

.. only:: rinoh

   .. list-table::
      :align: center
      :width: 80%

      * - .. image:: /_images/coder/code-server-virgin.*
             :align: center
             :scale: 100%
      * - .. image:: /_images/coder/code-server-bash.*
             :align: center
             :scale: 100%

Nun kannst du in den vorbereiteten **West Workspace** wechseln, gebe ein::

   cd workspace
   ls -al

**Ab diesen Moment bist du vollständig arbeitsfähig und kannst Applikationen
mit Zephyr bauen oder selber welche entwickeln.**

Gerne kannst du aber auch erst einmal deinen West Workspace erkunden und dein
erstes West Kommando absetzen, so z.B.::

   west list --format "{name:12}{path:28}{revision:40}"

… oder nur ganz kurz :program:`west list`. Damit erhältst du deine Baseline,
also eine wichtige Information für dein **Software Configuration Management**.

.. list-table::
   :align: center
   :width: 80%

   * - .. image:: /_images/coder/code-server-west-list.*
          :align: center
          :scale: 100%

Du kannst hier schon erkennen, dass die Softwarequellen von Zephyr aus einer
Seitenlinie stammen, Branch-Name |zephyr_branch|. Das **West Manifest** wird
von dem Projekt (Verzeichnis) :file:`bridle` vorgegeben, wie zu erwarten war.

Du hast nun auch die Möglichkeit, das West Manifest genauer zu untersuchen.
Gib dazu einfach mal folgendes ein::

   west manifest --path
   west manifest --resolve
   west manifest --validate

In der Tat, das West Manifest gehört dem Bridle Quellcode und ist die Datei
:file:`/home/coder/workspace/bridle/west.yml`. Auch wird nun sichtbar, dass
die Softwarequellen von Zephyr nicht nur aus einer Seitenlinie stammen, sondern
auch noch aus einem anderen als dem offiziellen Git Repository. Es handelt sich
um unseren Spiegel auf GitHub unter :file:`https://github.com/tiacsys/zephyr`.

.. list-table::
   :align: center
   :width: 80%

   * - .. image:: /_images/coder/code-server-west-manifest.*
          :align: center
          :scale: 100%

.. rubric:: Durchführung (allgemein)

Wir werden im Folgenden drei Beispiele von Zephyr benutzen. Dabei durchläufst
du immer wieder die selben drei Schritte:
(1) UF2 Firmware **bauen**,
(2) UF2 Firmware auf das MCU-Board **hochladen**,
(3) Ausführung auf dem MCU-Board **beobachten**.

Dieser Dreiklang wird dir nun häufiger begegnen. Daher findest du hier nur
Informationen und Abbildungen zum prinzipiellen Ablauf. So findest du hier keine
konkreten Namen eines MCU-Boards oder Beispiels. Vielmehr werden wir dafür nur
symbolische Platzhalter benutzen, z.B. ``<board_name>``.

#. UF2 Firmware **bauen**

   Benutze deine **Online-Sitzung von VS Code in deinem WEB-Browser**, um eine
   **Zephyr UF2 Firmware** zu bauen.

   .. image:: /_images/symbol-coder-server-bl.*
      :class: sidecar

   Dazu navigierst du **im unteren Panel in das Terminal** mit der offenen
   Bash Sitzung und gibst mindestens folgendes ein::

      west build -p -b <board_name> <path_to_zephyr_app_or_sample_or_test>

   Nach erfolgreicher Übersetzung wirst du über den integrierten **Datei
   Explorer** (auf der linken Seite) in einem Unterordner deines **West
   Workspace** die soeben gebaute *Zephyr UF2 Firmware* finden. Der genaue
   Dateiname, relative zum *West Workspace*, lautet:

      :file:`build/zephyr/zephyr.uf2`

   Dieser Name ist immer so, egal welche Applikation gegen welche Art von
   Hardware gebaut wurde. Diese UF2 Datei wirst du immer aus deiner virtuellen
   Entwicklungsumgebung (online, im WEB-Browser) auf deinen lokalen Host-PC
   herunterladen, denn nur dieser hat eine reale Verbindung über USB zu deinem
   MCU-Board. Mache das also und speicher dir diese UF2 Datei an einem Ort ab,
   an dem du sie im nächsten Schritt auch gleich wieder findest:

   .. list-table::
      :align: center
      :width: 80%

      * - .. image:: /_images/coder/code-server-uf2-download.*
             :align: center
             :scale: 100%

#. UF2 Firmware auf das MCU-Board **hochladen**

   Versetze dein MCU-Board wieder in den *UF2 Upload-Modus* (Bootloader).

   .. image:: /_images/symbol-rp2040-uf2-rd.*
      :class: sidecar

   Kopiere die zuvor gebaute **Zephyr UF2 Firmware** :file:`zephyr.uf2` in das
   Laufwerk :file:`RPI-RP2` von deinem Host-PC aus. Nach Erfolg **startet dein
   MCU-Board neu** (Reset).

   .. list-table::
      :align: center
      :width: 80%

      * - .. image:: /_images/doing/w11-rpi-rp2-zephyr-copy.*
             :align: center
             :scale: 100%

#. Ausführung auf dem MCU-Board **beobachten**

   Wenn immer in dieser Anleitung der Text mit dem **Auge** gekennzeichnet ist,
   musst du dich deinem **MCU-Board** zuwenden. Ausgaben an der Console oder zu
   erwartende Aktionen an der Hardware können nur dort passieren.

   .. image:: /_images/symbol-observe-or.*
      :class: sidecar

.. vi: ft=rst ai ts=3 et sw=3 sta
