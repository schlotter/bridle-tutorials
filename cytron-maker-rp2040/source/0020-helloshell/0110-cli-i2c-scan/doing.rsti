Durchführung
************

Hole deinen **Terminalemulator** in den Vordergrund und **stelle sicher**,
das du nach einem Reset (``RST`` Taste kurz gedrückt), folgendes siehst:

.. parsed-literal::
   :class: code

   \*\*\*\*\* delaying boot 4000ms (per build configuration) \*\*\*\*\*
   [00:00:00.179,000] :byl:`<wrn> udc_rpi: BUS RESET`
   [00:00:00.267,000] :byl:`<wrn> udc_rpi: BUS RESET`
   \*\*\* Booting Zephyr OS build zephyr-v3.6… (delayed boot 4000ms) \*\*\*
   Hello World! I'm THE SHELL from cytron_maker_pi_rp2040
   :bgn:`uart:~$` _

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Schauen wir uns zunächst den Syntax des Kommando :bcy:`i2c` an. Gib ein::

      i2c -h

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      i2c - I2C commands
      Subcommands:
        scan        : Scan I2C devices
                      Usage: scan <device>
        recover     : Recover I2C bus
                      Usage: recover <device>
        read        : Read bytes from an I2C device
                      Usage: read <device> <addr> <reg> [<bytes>]
        read_byte   : Read a byte from an I2C device
                      Usage: read_byte <device> <addr> <reg>
        write       : Write bytes to an I2C device
                      Usage: write <device> <addr> <reg> [<byte1>, ...]
        write_byte  : Write a byte to an I2C device
                      Usage: write_byte <device> <addr> <reg> <value>
        speed       : Configure I2C bus speed
                      Usage: speed <device> <speed>

.. rst-class:: page-break

Aktuellen HW-Aufbau scannen
===========================

Legen wir nun mit einem I²C Bus Scan los.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Gib folgendes ein und beobachte::

      i2c scan i2c@40044000

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

           0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
      00:             -- -- -- -- -- -- -- -- -- -- -- --
      10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      70: -- -- -- -- -- -- -- 77
      1 devices found on i2c@40044000

**Kontrolliere**, dass du auch die Hexadezimalzahl **77** angezeigt bekommst.
Sollte das bei dir nicht der Fall sein, dann frage bitte uns Mentoren.

.. rubric:: Woher kommt nun diese Zahl?

An deinem MCU-Board ist laut Aufbauanleitung das Modul **Seeed Studio – Grove
- Barometer Sensor BMP280** angeschlossen. Wie der Name es schon suggeriert, ist
auf diesem Modul der *Pressure Sensor* **BMP280** von Bosch verbaut. Ein Blick
in das Datenblatt\ [#]_ des Herstellers verrät auf Seite 28 (unterhalb der
Abbildung 6), dass dieses I²C Gerät eine **konfigurierbare 7-bit I²C Adresse**
besitzt.

.. figure:: /_images/doing/bst-bmp280-ds001-i2c-addr.*
   :align: center

   Bosch BMP280 Datenblatt: *"I²C Address Configuration"*

Entweder ist diese auf :bl:`0x76` oder :rd:`0x77` eingestellt. Der Modulhersteller
**Seeed Studio hat sich für die I²C Adresse 0x77 entschieden.**

.. ..... INFO ...............................................................

.. rst-class:: page-break

I²C Bus Struktur verändern und wieder scannen
=============================================

Wollen wir nun ein anderes I²C Gerät anschließen. In deiner Box findest du noch
das Modul **Seeed Studio – Grove - T/RH Sensor AHT20**. Das hast du bisher noch
nicht angeschlossen. Suche es aus deiner Box heraus, **ziehe** das Modul mit dem
**BMP280 Sensor** von deinem MCU-Board **ab** und **stecke dafür** das *"neue"*
Modul mit dem **AHT20 Sensor an**.

.. image:: /_images/assemblies/hs-hw-setup-i2c-bmp280-to-aht20.*
   :align: center

.. ..... INFO ...............................................................

.. admonition:: Gut zu wissen
   :class: good-to-know info

   Du musst dein MCU-Board für diesen Umbau am I²C Bus nicht ausschalten. Das
   Grove Steckersystem schützt dich vor falschen Verbindungen. Wenn du dir aber
   unsicher bist, dann kannst du dein MCU-Board für die Zeit des Umbaus an dem
   *On/Off Schalter* auch ausschalten.

.. rst-class:: page-break

Veränderten HW-Aufbau scannen
-----------------------------

Wiederholen wir den I²C Bus Scan mit dem veränderten Hardware-Aufbau.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Gib folgendes ein und beobachte::

      i2c scan i2c@40044000

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

           0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
      00:             -- -- -- -- -- -- -- -- -- -- -- --
      10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      30: -- -- -- -- -- -- -- -- 38 -- -- -- -- -- -- --
      40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      70: -- -- -- -- -- -- -- --
      1 devices found on i2c@40044000

**Kontrolliere**, dass du auch die Hexadezimalzahl **38** angezeigt bekommst.
Sollte das bei dir nicht der Fall sein, dann frage bitte uns Mentoren.

Auf diesem Modul ist der *Humidity and Temperature Sensor* **AHT20** von
ASAIR verbaut. Auch hier stammt die 7-bit I²C Adresse wieder aus dem zugehörigen
Datenblatt\ [#]_ des Herstellers, von Seite 12, Abschnitt *"7.3 Send Command"*
(oberhalb der Tabelle 9). Es gibt in diesem Fall aber keine alternative Adresse.

.. figure:: /_images/doing/asair-aht20-ds1003-i2c-addr.*
   :align: center

   ASAIR AHT20 Datenblatt: *"I²C Address"*

.. ..... INFO ...............................................................

.. rst-class:: page-break

I²C Bus Struktur weiter ausbauen und wieder scannen
===================================================

Als Abschluss dieser Übung schließt du bitte **beide Sensor-Module am I²C Bus
deines MCU-Boards** an. Dazu **benötigst du** eine kleine *"Rückverdrahtung"*,
oft auch als *"Backplane"* oder wie hier im Falle des Grove Stecksystem auch
als **I²C Hub** bezeichnet. In deiner Box findest du noch den **Seeed Studio –
Grove - I²C Hub (6 Port)**. Diesen hast du bisher auch noch nicht angeschlossen.
Suche diesen aus deiner Box heraus, **ziehe** das Modul mit dem **AHT20 Sensor**
von deinem MCU-Board **ab**, **stecke dafür** den *"neuen"* **I²C Hub an** und
**verbinde** dann die beiden **Sensor-Module (BMP280 und AHT20)** mit dem
**I²C Hub**.

.. image:: /_images/assemblies/hs-hw-setup-i2c-hub-aht20-bmp280.*
   :align: center

.. rst-class:: page-break

Veränderten HW-Aufbau scannen
-----------------------------

Wiederholen wir den I²C Bus Scan mit dem veränderten Hardware-Aufbau.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Gib folgendes ein und beobachte::

      i2c scan i2c@40044000

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

           0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
      00:             -- -- -- -- -- -- -- -- -- -- -- --
      10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      30: -- -- -- -- -- -- -- -- 38 -- -- -- -- -- -- --
      40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
      70: -- -- -- -- -- -- -- 77
      2 devices found on i2c@40044000

**Kontrolliere**, dass du die beiden Hexadezimalzahlen **38** und **77**
angezeigt bekommst. Sollte das bei dir nicht der Fall sein, dann frage
bitte uns Mentoren. Beide I²C Adressen solltest du auch an dieser Stelle
erwartet haben, oder nicht?

.. ..... INFO ...............................................................

.. admonition:: Gut zu wissen
   :class: good-to-know info

   Mit dieser Übung hast du noch keinen wirklichen Datenzugriff auf ein I²C
   Gerät durchgeführt. Auch die :ref:`Zephyr I²C API <zephyr:i2c_api>` hast
   du nur indirekt für ein paar *"Spielereien"* mit dem I²C Protokoll für die
   I²C Bus Scans benutzt. Erst ab der :ref:`folgenden Übung <hs-cli-i2c-aht20>`
   wirst du direkte Zugriffe auf ein spezielles I²C Gerät durchführen.

   .. admonition:: WICHTIG
      :class: important

      **Beachte bitte**, dass nun dein Hardwareaufbau eine wesentliche Änderung
      erfahren hat. **An deinem MCU-Board** sind jetzt **zwei externe I²C Module
      angeschlossen!**

.. include:: yourspace.rsti

.. admonition:: Nur für Mentoren
   :class: red-border bug
   :collapsible:

   :download:`ZS-cytron_maker_pi_rp2040-usbcons-helloshell.uf2
   </_assets/ZS-cytron_maker_pi_rp2040-usbcons-helloshell.uf2>`
   – als Not-Backup gedacht!

.. [#] https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmp280-ds001.pdf
.. [#] https://asairsensors.com/wp-content/uploads/2021/09/Data-Sheet-AHT20-Humidity-and-Temperature-Sensor-ASAIR-V1.0.03.pdf

.. vi: ft=rst ai ts=3 et sw=3 sta
