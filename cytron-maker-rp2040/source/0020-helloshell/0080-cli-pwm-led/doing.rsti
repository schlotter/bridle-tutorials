Durchführung
************

Hole deinen **Terminalemulator** in den Vordergrund und **stelle sicher**,
das du nach einem Reset (``RST`` Taste kurz gedrückt), folgendes siehst:

.. parsed-literal::
   :class: code

   \*\*\*\*\* delaying boot 4000ms (per build configuration) \*\*\*\*\*
   [00:00:00.179,000] :byl:`<wrn> udc_rpi: BUS RESET`
   [00:00:00.267,000] :byl:`<wrn> udc_rpi: BUS RESET`
   \*\*\* Booting Zephyr OS build zephyr-v3.6… (delayed boot 4000ms) \*\*\*
   Hello World! I'm THE SHELL from |BOARD|
   :bgn:`uart:~$` _

.. admonition:: Beachte bitte!
   :class: red-thick-border failure
   :collapsible: open

   **PWM kollidiert mit GPIO!**

   Operationen an Ausgängen im PWM-Modus schlagen immer dann fehl, wenn die
   entsprechende Leitung im Mikrocontroller zuvor als digitaler Ausgang über
   die GPIO API konfiguriert wurde. Achte daher genau auf das durchgeführte
   Reset (``RST`` Taste kurz gedrückt) an deinem MCU-Board.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Schauen wir uns zunächst den Syntax des Kommando :bcy:`pwm` an. Gib ein::

      pwm -h

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      pwm - PWM shell commands
      Subcommands:
        cycles  : <device> <channel> <period in cycles> <pulse width in cycles>
                  [flags]
        usec    : <device> <channel> <period in usec> <pulse width in usec> [flags]
        nsec    : <device> <channel> <period in nsec> <pulse width in nsec> [flags]

MCU-Board Diagnose-LED an **GP7**
=================================

Versuchen wir also zunächst die Diagnose-LED an **GP7** :spelling:ignore:`bzw.`
**PWM Kanal 7** wie in :ref:`der zurückliegenden Übung <hs-cli-led>`, als es
um die Zephyr LED API ging, nun mit der Zephyr PWM API zu schalten. Dort wurde
die LED Helligkeit gestaffelt auf 10%, 50% und 100% gestellt. Diese Werte
müssen wir zunächst gedanklich auf die notwendigen PWM Parameter der Periode
(Grundfrequenz) und Impulsdauer umrechnen.

.. compound::

   .. rst-class:: page-break

   Damit ergeben sich folgende Werte für die frei gewählte Grundfrequenz
   von **fₚ = 50Hz**:

   .. table::
      :align: center

      +----------------+--------------------+-----------------+
      | LED Helligkeit | Periode *T = 1/fₚ* | Impulsdauer *t* |
      +================+====================+=================+
      |         0%     |    20ms = 20000µs  |   0ms = 0µs     |
      +----------------+--------------------+-----------------+
      |        10%     |    20ms = 20000µs  |   2ms = 2000µs  |
      +----------------+--------------------+-----------------+
      |        50%     |    20ms = 20000µs  |  10ms = 10000µs |
      +----------------+--------------------+-----------------+
      |       100%     |    20ms = 20000µs  |  20ms = 20000µs |
      +----------------+--------------------+-----------------+

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

Gib nacheinander ein und beobachte::

   pwm usec pwm@40050000 7 20000 2000
   pwm usec pwm@40050000 7 20000 10000
   pwm usec pwm@40050000 7 20000 20000
   pwm usec pwm@40050000 7 20000 0

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

Die Grundfrequenz von *fₚ = 50Hz* ist ein guter Erfahrungswert für den Einsatz
von LED Beleuchtungen. Die Ladungen innerhalb der LED bewegen sich hierbei im
Sättigungsbereich und die Trägheit unterdrückt jeglichen *Flicker-Effekt*.

.. compound::

   Wiederholen wir die Kommandos doch einfach mal mit einer viel tieferen
   Grundfrequenz von **fₚ = 10Hz**:

   .. table::
      :align: center

      +----------------+--------------------+------------------+
      | LED Helligkeit | Periode *T = 1/fₚ* | Impulsdauer *t*  |
      +================+====================+==================+
      |         0%     |   100ms = 100000µs |   0ms = 0µs      |
      +----------------+--------------------+------------------+
      |        10%     |   100ms = 100000µs |  10ms = 10000µs  |
      +----------------+--------------------+------------------+
      |        50%     |   100ms = 100000µs |  50ms = 50000µs  |
      +----------------+--------------------+------------------+
      |       100%     |   100ms = 100000µs | 100ms = 100000µs |
      +----------------+--------------------+------------------+

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Gib nacheinander ein und beobachte::

      pwm usec pwm@40050000 7 100000 10000
      pwm usec pwm@40050000 7 100000 50000
      pwm usec pwm@40050000 7 100000 100000
      pwm usec pwm@40050000 7 100000 0

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

Wie zu erwarten, ist ein deutliches Flackern zu beobachten, wenn die Pulsdauer
kleiner 100% eingestellt wird.

Zusätzlich angeschlossene LED
=============================

Wollen wir zum Abschluss die Behauptung überprüfen, dass man mit der Zephyr
PWM API nicht nur die eine einzige *Diagnose-LED an GP7 (PWM Kanal 7)* steuern
kann. Die zusätzlich angeschlossene **externe LED** am Steckverbinder
**GROVE 3** ist über die Leitung **GP5**, also den **PWM Kanal 5**, erreichbar.

Wenden wir die Kommandos mit der Grundfrequenz von **fₚ = 50Hz** noch einmal an,
nun aber auf den **PWM Kanal 5**.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Beginnen wir mit 50% Helligkeit::

      pwm usec pwm@40050000 5 20000 10000

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      :rd:`failed to setup PWM (err -22)`

:brd:`Schade, die Behauptung stimmt` (noch) :brd:`nicht.`

:ird:`Grund dafür ist der unzureichende Devicetree`, der aktuell für deine
Zephyr Laufzeitumgebung beim Erstellen der *Zephyr UF2 Firmware* benutzt
wurde. Die Tabelle weiter oben, mit der Übersicht der verfügbaren PWM Kanäle
aus Sicht des MCU-Boards, führt kein Setup des PWM Kanals 5 auf.

.. ..... INFO ...............................................................

.. rubric:: Warum ist das so?

Nun, das ist ein gewolltes Verhalten von Zephyr.

Ein Systemarchitekt wird schon längst erkannt haben, dass die **zusätzliche
externe LED nicht Teil des MCU-Board ist** und somit im Kontext des MCU-Board
auch **gänzlich unbekannt sein muss**. **Zephyr kann** aber ein solches
**LED Modul als Shield abstrahieren** und für den Build-Prozess mit
:program:`west build …` bereitstellen.

Die Technik hierbei ist das Konzept von
:ref:`Boards <zephyr:board_porting_guide>` und
:ref:`Shields <zephyr:shields>` sowie das
:ref:`Devicetree Overlay <zephyr:use-dt-overlays>` und kann sehr schnell
komplexe Ausmaße annehmen. Wir behandeln es daher in späteren Übungen.
Wir wollen in diesem Kapitel bei den Grundlagen bleiben.

.. ..... INFO ...............................................................

.. admonition:: Gut zu wissen
   :class: good-to-know info

   Du, als Firmware Entwickler, müsstest noch die jeweilige *"Verdrahtung"*
   als **Hardwaredefinition** hinzufügen.

   Das bedeutet, aber nicht, dass du nun wie in herkömmlichen RTOS Projekten
   deinen oder schlimmstenfalls auch noch fremden Quellcode in irgendwelchen
   Board-Support-Packages (BSP) vielleicht auch noch richtig tief in nativem
   C-Code anfassen, ändern oder erweitern musst.

   **Du beschreibst deklarativ die tatsächlich vorliegende Hardware in der
   Sprache des Devicetree (DTS), als Devicetree Overlay.**

   Siehe auch: https://www.devicetree.org/

.. include:: yourspace.rsti

.. admonition:: Nur für Mentoren
   :class: red-border bug
   :collapsible:

   :download:`ZS-cytron_maker_pi_rp2040-usbcons-helloshell.uf2
   </_assets/ZS-cytron_maker_pi_rp2040-usbcons-helloshell.uf2>`
   – als Not-Backup gedacht!

.. vi: ft=rst ai ts=3 et sw=3 sta
