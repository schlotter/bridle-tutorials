Durchführung
************

Hole deinen **Terminalemulator** in den Vordergrund und **stelle sicher**,
das du nach einem Reset (``RST`` Taste kurz gedrückt), folgendes siehst:

.. parsed-literal::
   :class: code

   \*\*\*\*\* delaying boot 4000ms (per build configuration) \*\*\*\*\*
   [00:00:00.179,000] :byl:`<wrn> udc_rpi: BUS RESET`
   [00:00:00.267,000] :byl:`<wrn> udc_rpi: BUS RESET`
   \*\*\* Booting Zephyr OS build zephyr-v3.6… (delayed boot 4000ms) \*\*\*
   Hello World! I'm THE SHELL from |BOARD|
   :bgn:`uart:~$` _

.. admonition:: Beachte bitte!
   :class: red-thick-border failure
   :collapsible: open

   **PWM kollidiert mit GPIO!**

   Operationen an Ausgängen im PWM-Modus schlagen immer dann fehl, wenn die
   entsprechende Leitung im Mikrocontroller zuvor als digitaler Ausgang über
   die GPIO API konfiguriert wurde. Achte daher genau auf das durchgeführte
   Reset (``RST`` Taste kurz gedrückt) an deinem MCU-Board.

-----------------------------------------------------------------------------

.. ..... INFO ...............................................................

Im Grunde ändert sich bei der Benutzung des Kommando :bcy:`pwm` nichts weiter.
Die Servomotoren sind an **GP12** bis **GP15** angeschlossen, somit wirst du
nun die **PWM Kanäle 12 bis 15** benutzen.

Du solltest dir jetzt noch einmal **deinen eigenen Aufbau ganz genau ansehen**
und aufschreiben **welcher Servomotor (Typ) an welchem dieser 4 PWM Kanäle**
angeschlossen ist.

.. admonition:: Deine Gedankenstütze
   :class: question
   :collapsible: open

   +-----------------+-------------------------------+------------+---------------+
   |                 |                               |      PCM Kanal-Nummer      |
   | Name Servomotor | Typ Servomotor                +------------+---------------+
   |                 |                               | *Tutorial* | **DEINE**     |
   +=================+===============================+============+===============+
   | SG90 Servo 180° | Winkelposition                |    *12*    |``___________``|
   +-----------------+-------------------------------+------------+---------------+
   | FS90R Servo 360°| Drehrichtung/-Geschwindigkeit |    *15*    |``___________``|
   +-----------------+-------------------------------+------------+---------------+

.. rst-class:: page-break

Winkelpositionierung mit **Servomotor SG90**
============================================

Beginnen wir mit dem Servomotor an **PWM Kanal 12**.

Der Servomotor **Tower Pro – SG90 Micro Servo 180°** stellt abhängig von der
**Impulsdauer** eine feste **Winkelposition** ein. Folgende Beziehungen gelten
zwischen Impulsdauer und Winkelposition (Zwischenwerte möglich).

.. compound::

   Die Grundfrequenz beträgt immer **fₚ = 50Hz**:

   .. table::
      :align: center

      +-----------------+-------+--------+--------------------+-----------------+
      | Bedeutung       | Winkelposition | Periode *T = 1/fₚ* | Impulsdauer *t* |
      +=================+=======+========+====================+=================+
      | Minimalposition |    0° |  -90°  |    20ms = 20000µs  | 0,50ms = 500µs  |
      +-----------------+-------+--------+--------------------+-----------------+
      | halb rechts     |   45° |  -45°  |    20ms = 20000µs  | 1,00ms = 1000µs |
      +-----------------+-------+--------+--------------------+-----------------+
      | Mittelposition  |   90° |    0°  |    20ms = 20000µs  | 1,50ms = 1500µs |
      +-----------------+-------+--------+--------------------+-----------------+
      | halb links      |  135° |  +45°  |    20ms = 20000µs  | 2,00ms = 2000µs |
      +-----------------+-------+--------+--------------------+-----------------+
      | Maximalposition |  180° |  +90°  |    20ms = 20000µs  | 2,50ms = 2500µs |
      +-----------------+-------+--------+--------------------+-----------------+

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Gib nacheinander ein und beobachte::

      pwm usec pwm@40050000 12 20000 2500
      pwm usec pwm@40050000 12 20000 2000
      pwm usec pwm@40050000 12 20000 1500
      pwm usec pwm@40050000 12 20000 1000
      pwm usec pwm@40050000 12 20000 500

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

Der betreffende Servomotor fährt kurz an, bewegt sich bis zur vorgegebenen
Winkelposition (Äquivalent ist die Impulsdauer) und bleibt dort stehen.

**Spiele einfach mal mit Zwischenwerten für die Impulsdauer.**

.. rst-class:: page-break

Drehgeschwindigkeit mit **Servomotor FS90R**
============================================

Fahren wir fort mit dem Servomotor an **PWM Kanal 15**.

Der Servomotor **Feetech – FS90R Micro Servo 360°** stellt abhängig von der
**Impulsdauer** eine feste **Drehrichtung und Drehgeschwindigkeit** zwischen
0…80 RPM ein. Folgende Beziehungen gelten zwischen Impulsdauer, Drehrichtung
und Drehgeschwindigkeit (Zwischenwerte möglich).

.. compound::

   Die Grundfrequenz beträgt immer **fₚ = 50Hz**:

   .. table::
      :align: center

      +-----------------------------------+-------------+-----+--------------------+-----------------+
      | Bedeutung                         | Richtung    / RPM | Periode *T = 1/fₚ* | Impulsdauer *t* |
      +===================================+=============+=====+====================+=================+
      | :spelling:ignore:`Maximalgeschw.` | CW (rechts) | ≥80 |    20ms = 20000µs  | 0,50ms = 500µs  |
      +-----------------------------------+             +-----+--------------------+-----------------+
      | :spelling:ignore:`Mittelgeschw.`  |             | ≈40 |    20ms = 20000µs  | 1,35ms = 1350µs |
      +-----------------------------------+-------------+-----+--------------------+-----------------+
      | :spelling:ignore:`Minimalgeschw.` |             | ≈10 |    20ms = 20000µs  | 1,45ms = 1450µs |
      +-----------------------------------+-------------+-----+--------------------+-----------------+
      | Stopp, kraftlos                   |     (keine) |  0  |    20ms = 20000µs  | 1,50ms = 1500µs |
      +-----------------------------------+-------------+-----+--------------------+-----------------+
      | :spelling:ignore:`Minimalgeschw.` |             | ≈10 |    20ms = 20000µs  | 1,55ms = 1550µs |
      +-----------------------------------+             +-----+--------------------+-----------------+
      | :spelling:ignore:`Mittelgeschw.`  |             | ≈40 |    20ms = 20000µs  | 1,65ms = 1650µs |
      +-----------------------------------+-------------+-----+--------------------+-----------------+
      | :spelling:ignore:`Maximalgeschw.` | CCW (links) | ≥80 |    20ms = 20000µs  | 2,50ms = 2500µs |
      +-----------------------------------+-------------+-----+--------------------+-----------------+

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Gib nacheinander ein und beobachte::

      pwm usec pwm@40050000 15 20000 2500
      pwm usec pwm@40050000 15 20000 1650
      pwm usec pwm@40050000 15 20000 1550
      pwm usec pwm@40050000 15 20000 1500
      pwm usec pwm@40050000 15 20000 1450
      pwm usec pwm@40050000 15 20000 1350
      pwm usec pwm@40050000 15 20000 500

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

Der betreffende Servomotor fährt an bis er die vorgegebenen Drehrichtung und
Drehgeschwindigkeit (Äquivalent ist die Impulsdauer) erreicht hat und dreht
weiter. Ausnahme ist natürlich die Vorgabe *"STOPP"*.

**Spiele einfach mal mit Zwischenwerten für die Impulsdauer.**

.. include:: yourspace.rsti

.. admonition:: Nur für Mentoren
   :class: red-border bug
   :collapsible:

   :download:`ZS-cytron_maker_pi_rp2040-usbcons-helloshell.uf2
   </_assets/ZS-cytron_maker_pi_rp2040-usbcons-helloshell.uf2>`
   – als Not-Backup gedacht!

.. vi: ft=rst ai ts=3 et sw=3 sta
