Durchführung
************

Hole deinen **Terminalemulator** in den Vordergrund und **stelle sicher**,
das du nach einem Reset (``RST`` Taste kurz gedrückt), folgendes siehst:

.. parsed-literal::
   :class: code

   |BOOTMSG_USB_BS_HELLOSHELL|

Schnell-Hilfe
=============

Tippe doch einfach mal an deinem Host-PC, innerhalb deines Terminalemulators,
auf die Tabulatortaste :kbd:`⇥` und schau, was dir von der Zephyr Shell
zurückgegeben wird.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Drücker die Tabulatortaste :kbd:`⇥` an deinem Host-PC.

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      |BS_HELLOSHELL_TAB|

Damit hast du jetzt schon die in der Zephyr Shell eingebaute (optionale)
*TAB-Completion* kennengelernt.

Eingebaute Hilfe
================

Du siehst, es gibt reichlich Kommandos zu entdecken. Lass uns mit der Hilfe
beginnen.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Gib entweder das vollständige Kommando ein::

      help

   … oder probiere auch gleich die *TAB-Completion* aus. Dann würdest du z.B.
   nur ``he`` gefolgt von der Tabulatortaste :kbd:`⇥` eingeben. Damit endest du
   in folgendem Dialog:

   .. parsed-literal::
      :class: code

      |BS_HELLOSHELL_HE_TAB|

Du musst das Kommando :bcy:`help` also wirklich ausschreiben, da es da noch
ein Kommando :bcy:`hello` gibt, ein spezielles Kommando, das es nur in diesem
Beispiel ``helloshell`` aus dem Bridle Projekt gibt.

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      |BS_HELLOSHELL_HELP|

.. rst-class:: page-break

Shell und Logging
=================

Für eine "Grundausstattung" sind das schon reichlich viele Kommandos. Viele
davon haben auch Unterkommandos. Das bekommt man durch die *TAB-Completion*
oder den Aufruf eines Kommandos mit dem Parameter ``-h`` (kurze Schreibweise)
oder ``--help`` (lange Schreibweise) heraus.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Gib doch einfach mal folgendes ein::

      shell -h

   … oder::

      shell --help

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      |BS_HELLOSHELL_SHELL_HELP|

Shell Backend
-------------

Das erste Unterkommando deutet auf eine sehr interessante Information hin.
Hatten wir doch in :ref:`der vorangegangenen Übung <hs-build-upload>` gelernt,
dass die *Shell* und das *Logging* koexistieren. Beide müssen sich unter
Umständen die nur einmalig vorhandene Hardware über die *Console* teilen.

.. rst-class:: page-break

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Schauen wir doch mal nach, was uns dieses Unterkommando zurück gibt::

      shell backends

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      |BS_HELLOSHELL_SHELL_BACKENDS|

Das sieht **plausible** aus, ist die **Shell** ja gerade **an eine virtuelle
UART** aus dem *Zephyr USB Stack*, die **USB-CDC/ACM Klasse**, gebunden.

Logging Backend
---------------

Das *Logging* besitzt ein ähnliches Shell Kommando, das Kommando ``log``. Auch
das *Logging* benötigt einen Ausgabekanal für den Benutzer, ein *Backend*.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Wir kontrollieren das mit::

      log backend

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      |BS_HELLOSHELL_LOG_BACKEND|

Das *Backend* vom *Logging* und der *Shell* kooperieren also mit- und
untereinander. Sie sind der Unterbau für beide Dienste, um über die einmalig
vorhandene *Console* mit der Außenwelt zu kommunizieren.

.. rst-class:: page-break

Erweiterung durch Bridle
========================

Wollen wir uns zum Schluss noch das weiter oben bereits erwähnte Kommando
:bcy:`hello` ansehen. Sicher können wir erahnen, was es machen wird. Wir
wollen das aber genau wissen und befragen die Hilfe.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Gib ein::

      hello -h

   … oder::

      hello --help

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      |BS_HELLOSHELL_HELLO_HELP|

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Dann lass uns das machen::

      hello

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      |BS_HELLOSHELL_HELLO|

Wenn dich die Implementierung dieses Kommandos interessiert, dann schaue dir
später in aller Ruhe den Quellcode an – es ist nur eine kurze Datei:

   |bridle_shell_cmd_hello_c|

.. rst-class:: page-break

Kommando-Historie
=================

Eine letzte "schicke" Eigenschaft der Zephyr Shell ist die *History*. Wenn
eingeschaltet, kannst du dir jederzeit die letzten von der Shell ausgeführten
Kommandozeilen anzeigen lassen.

-----------------------------------------------------------------------------

.. ..... ACTION .............................................................

.. image:: /_images/symbol-doing-vi.*
   :class: sidecar

.. compound::

   Git ein::

      history

-----------------------------------------------------------------------------

.. ..... RESULT .............................................................

.. image:: /_images/symbol-observe-or.*
   :class: sidecar

.. compound::

   :ign:`Folgendes wird erscheinen:`

   .. parsed-literal::
      :class: code

      |BS_HELLOSHELL_HISTORY|

.. admonition:: Gut zu wissen
   :class: good-to-know info

   Mit den Cursor-Tasten :kbd:`⇡` und :kbd:`⇣` kannst du natürlich in der
   Kommando-Historie vor und zurück gehen. Ebenso funktioniert dann auch
   das Editieren der jeweiligen Kommandozeile.

.. include:: yourspace.rsti

.. admonition:: Nur für Mentoren
   :class: red-border bug
   :collapsible:

   :download:`ZS-cytron_maker_pi_rp2040-usbcons-helloshell.uf2
   </_assets/ZS-cytron_maker_pi_rp2040-usbcons-helloshell.uf2>`
   – als Not-Backup gedacht!

.. vi: ft=rst ai ts=3 et sw=3 sta
